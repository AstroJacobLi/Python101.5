# Lecture 1: Setting up your computer -- Operating system, Git, SSH and Python

## Operating System

### Concepts
- Operating System: two categories -- Unix-based, and Windows
- Unix: operating files in a certain way. Linux, MacOS, etc.
- Shell: A Unix shell is a command-line interpreter or shell that provides a command line user interface for Unix-like operating systems.
- GUI (graphical user interface)
- Syntax and command line
- Terminal: Linux and Windows (e.g. [cmder](https://cmder.net)). Windows now supports bash. Convention: starting with ``$``.
- Bash: a Unix shell written for GNU project. (Bourne Again Shell = BASH). [Zsh v.s. Bash.](https://www.chenhuijing.com/blog/bash-to-zsh/#ðŸŽ¹) ``/bin/bash xxx``
- Directory: ``dir``

### Unix commands
- ``man ls``
- ``cd``: ``cd .``, ``cd ..``, ``cd ../..``, ``cd ~``, ``cd /``, ``cd ./xxx/xxxx``
- ``pwd``
- ``ls``: -lth, -S (size), -R (recursively), -d (list folders), -h (human-readable size), -t (time)
- ``mkdir``: never use empty space!
- ``mv``: rename file. -u (update), -v (verbose). ``mv file_name new_name new_location``.
- ``cp``: -R (recursively), -u (update), -i (interactive), -f (forced)
- ``rm``: -r (recursively), -f (forced). Be cautious with ``rm -rf xxx``.
- control + C, control + Z
- ``sudo`` (not Subo)
- Wildcard ``*``
- ``cat`` (concatenate): print out file content. ``cat file1 file2 > file3``.
- ``wc`` (word count): lines, words, characters. ``wc -l`` only prints out lines.
- ``>``: ``ls -lht > directory.txt``

### [Unix file permissions](https://www.zzee.com/solutions/linux-permissions.shtml)
``-rwxr--r--``

File,
owner has read, write, execute permissions,
group: only read and execute permissions,
others: only read and execute permissions. 

- For the owner:
``chmod +rwx filename`` to add permissions.
``chmod -wx filename`` to remove write and executable permissions.

- For group members:
``chmod g+rwx filename`` to add permissions.

- For other users:
``chmod o-wx filename`` to remove write and executable permissions.


### [More on Bash]
``~/.bash_rc`` or ``~/.bash_profile``: config file of bash. 
``~/.bash_history``: history of bash. 

#### Alias
Alias makes your life better!

``$ alias`` prints out all aliases defined. 

Write in ``.bash_profile``: ``alias show_pid='ps aux | grep ssh'``

No spaces around "="!!!

#### ``grep``
Searching for particular strings.

Syntax: ``grep [options] pattern [files]``

Options:
-c : This prints only a count of the lines that match a pattern
-h : Display the matched lines, but do not display the filenames.
**-i : Ignores, case for matching**
-l : Displays list of a filenames only.
-n : Display the matched lines and their line numbers.
-v : This prints out all the lines that do not matches the pattern
-e exp : Specifies expression with this option. Can use multiple times.
-f file : Takes patterns from file, one per line.
-E : Treats pattern as an extended regular expression (ERE)
-w : Match whole word
-o : Print only the matched parts of a matching line,
 with each such part on a separate output line.


#### Pipe
``cat dir.txt | grep 'python' | wc -l``.

### SSH and SCP


## Homework
register an account in Beida cluster; connect using SSH; try file permissions.